#ifndef _MY_TXT_H
#define _MY_TXT_H

#include <sh1106.h>

// Here to avoid including the whole Adafruit GFX library
typedef struct _GFXglyph {
  uint16_t bitmapOffset; // Pointer into GFXfont->bitmap
  uint8_t  width;        // Bitmap dimensions in pixels
  uint8_t  height;       // Bitmap dimensions in pixels
  uint8_t  xAdvance;     // Distance to advance cursor (x axis)
  int8_t   xOffset;      // X dist from cursor pos to UL corner
  int8_t   yOffset;      // Y dist from cursor pos to UL corner
} GFXglyph;

// Generated by fontconvert for the Adafruit GFX library
// Online version: https://fontconvert.huyzona.com

const uint8_t my_font_bitmaps[] = {
  0x00, 0xFF, 0xFF, 0x3C, 0xB6, 0xD0, 0x11, 0x08, 0x9F, 0xE4, 0x42, 0x21,
  0x10, 0x89, 0xFE, 0x44, 0x22, 0x00, 0x10, 0xFB, 0x4E, 0x8F, 0x0E, 0x0E,
  0x0E, 0x1E, 0x2E, 0x5B, 0xE1, 0x00, 0x77, 0x91, 0x22, 0x24, 0x45, 0x07,
  0x20, 0x08, 0x02, 0x70, 0x51, 0x12, 0x22, 0x44, 0x87, 0x00, 0x7C, 0x63,
  0x31, 0x98, 0x13, 0x0E, 0x07, 0x1D, 0x8C, 0xC6, 0x63, 0x1F, 0x00, 0xF0,
  0x2B, 0x6D, 0xB6, 0xDB, 0x22, 0x89, 0xB6, 0xDB, 0x6D, 0xA8, 0x25, 0x7E,
  0x4F, 0xD4, 0x80, 0x21, 0x3E, 0x42, 0x00, 0xF6, 0xFC, 0xF0, 0x04, 0x20,
  0x82, 0x10, 0x42, 0x08, 0x41, 0x04, 0x20, 0x7D, 0x8F, 0x1E, 0x7D, 0x7A,
  0xF9, 0xF3, 0xC7, 0x8D, 0xF0, 0x7D, 0xB6, 0xDB, 0x6D, 0x80, 0x7D, 0x0C,
  0x18, 0x30, 0xC1, 0x86, 0x30, 0x61, 0x83, 0xF8, 0xFE, 0x08, 0x61, 0x07,
  0xC0, 0xC1, 0x83, 0x07, 0x0D, 0xF0, 0x06, 0x0E, 0x16, 0x26, 0x46, 0x86,
  0xFF, 0x06, 0x06, 0x06, 0x06, 0xFF, 0x83, 0x06, 0x0F, 0xC0, 0xC1, 0x83,
  0x07, 0x0D, 0xF0, 0x3C, 0xC3, 0x06, 0x0F, 0xDC, 0xF1, 0xE3, 0xC7, 0x8D,
  0xF0, 0xFE, 0x0C, 0x18, 0x70, 0xC1, 0x86, 0x0C, 0x18, 0x30, 0x60, 0x7D,
  0x8F, 0x1E, 0x3C, 0x67, 0x31, 0xE3, 0xC7, 0x8D, 0xF0, 0x7D, 0x8F, 0x1E,
  0x3C, 0x79, 0xDF, 0x83, 0x06, 0x19, 0xE0, 0xF0, 0x0F, 0xF0, 0x0F, 0x60,
  0x0C, 0x63, 0x18, 0xC1, 0x83, 0x06, 0x0C, 0xFE, 0x03, 0xF8, 0xC1, 0x83,
  0x06, 0x0C, 0x63, 0x18, 0xC0, 0x7D, 0x0C, 0x18, 0x30, 0xC3, 0x06, 0x0C,
  0x00, 0x30, 0x60, 0x3F, 0x88, 0x0A, 0x7C, 0xD8, 0x9A, 0x13, 0x42, 0x68,
  0x4D, 0x99, 0x9D, 0xE8, 0x00, 0xFE, 0x00, 0x7D, 0x8F, 0x1E, 0x3C, 0x7F,
  0xF1, 0xE3, 0xC7, 0x8F, 0x18, 0xFD, 0x8F, 0x1E, 0x3C, 0x7F, 0x31, 0xE3,
  0xC7, 0x8F, 0xF0, 0x7D, 0x87, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x85,
  0xF0, 0xFD, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xE3, 0xC7, 0x8F, 0xF0, 0xFF,
  0x0C, 0x30, 0xC3, 0xEC, 0x30, 0xC3, 0x0F, 0xC0, 0xFF, 0x0C, 0x30, 0xC3,
  0xEC, 0x30, 0xC3, 0x0C, 0x00, 0x7D, 0x87, 0x06, 0x0C, 0x19, 0xF1, 0xE3,
  0xC7, 0x8D, 0xF0, 0xC7, 0x8F, 0x1E, 0x3C, 0x7F, 0xF1, 0xE3, 0xC7, 0x8F,
  0x18, 0xFF, 0xFF, 0xFC, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xF1, 0xE3, 0xC7,
  0x8D, 0xF0, 0xC1, 0xE1, 0xB1, 0x99, 0x8D, 0x87, 0x83, 0x61, 0x98, 0xC6,
  0x61, 0xB0, 0x60, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0F, 0xC0,
  0x80, 0x3C, 0x07, 0xE0, 0xFF, 0x1F, 0xBB, 0xB9, 0xF3, 0x8E, 0x38, 0x43,
  0x80, 0x38, 0x03, 0x80, 0x30, 0x80, 0xE0, 0x78, 0x3E, 0x1B, 0x8C, 0xE6,
  0x3B, 0x0F, 0x83, 0xC0, 0xE0, 0x20, 0x7D, 0x8F, 0x1E, 0x3C, 0x78, 0xF1,
  0xE3, 0xC7, 0x8D, 0xF0, 0xFD, 0x8F, 0x1E, 0x3C, 0x7F, 0xB0, 0x60, 0xC1,
  0x83, 0x00, 0x7D, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xE3, 0xC7, 0x8D, 0xF0,
  0x70, 0xFD, 0x8F, 0x1E, 0x3C, 0x7F, 0xB1, 0xE3, 0xC7, 0x8F, 0x18, 0x7B,
  0x1C, 0x38, 0xF1, 0xE3, 0xC7, 0x0E, 0x37, 0x80, 0xFC, 0xC3, 0x0C, 0x30,
  0xC3, 0x0C, 0x30, 0xC3, 0x00, 0xC7, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xE3,
  0xC7, 0x8D, 0xF0, 0xC7, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xE3, 0xC7, 0x8B,
  0xE0, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C,
  0x63, 0xC6, 0x3C, 0x62, 0xFF, 0xC0, 0xC7, 0x8F, 0x1E, 0x3C, 0x67, 0x31,
  0xE3, 0xC7, 0x8F, 0x18, 0xCF, 0x3C, 0xF3, 0xCD, 0xE3, 0x0C, 0x30, 0xC3,
  0x00, 0xFE, 0x0C, 0x30, 0xE1, 0x87, 0x0C, 0x38, 0x61, 0x83, 0xF8, 0xFB,
  0x6D, 0xB6, 0xDB, 0x6E, 0x81, 0x04, 0x10, 0x20, 0x81, 0x04, 0x08, 0x20,
  0x81, 0xED, 0xB6, 0xDB, 0x6D, 0xBE, 0x10, 0x51, 0x14, 0x10, 0xFF, 0x80,
  0x90, 0x7D, 0x0C, 0x1B, 0xFC, 0x78, 0xF1, 0xBF, 0xC1, 0x83, 0x07, 0xEC,
  0x78, 0xF1, 0xE3, 0xC7, 0x8F, 0xF0, 0x7B, 0x1C, 0x30, 0xC3, 0x0C, 0x5E,
  0x06, 0x0C, 0x1B, 0xFC, 0x78, 0xF1, 0xE3, 0xC7, 0x8D, 0xF8, 0x7D, 0x8F,
  0x1F, 0xFC, 0x18, 0x30, 0xBE, 0x3B, 0x19, 0xE6, 0x31, 0x8C, 0x63, 0x18,
  0x7F, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xBF, 0x07, 0x0D, 0xF0, 0xC1, 0x83,
  0x07, 0xEC, 0x78, 0xF1, 0xE3, 0xC7, 0x8F, 0x18, 0xC3, 0xFF, 0xFC, 0x0C,
  0x00, 0x03, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xE3, 0x78, 0xC0, 0xC0, 0xC0,
  0xC6, 0xCC, 0xD8, 0xF0, 0xF0, 0xD8, 0xCC, 0xC6, 0xFF, 0xFF, 0xFC, 0xFD,
  0xEC, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xFD,
  0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xE3, 0x7D, 0x8F, 0x1E, 0x3C, 0x78, 0xF1,
  0xBE, 0xFD, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xFE, 0xC1, 0x80, 0x7F, 0x8F,
  0x1E, 0x3C, 0x78, 0xF1, 0xBF, 0x06, 0x0C, 0xDF, 0xFC, 0x30, 0xC3, 0x0C,
  0x30, 0x7B, 0x1C, 0x3C, 0x3C, 0x38, 0xDE, 0x66, 0x6F, 0x66, 0x66, 0x66,
  0x30, 0xC7, 0x8F, 0x1E, 0x3C, 0x78, 0xF1, 0xBF, 0xC7, 0x8F, 0x1E, 0x3C,
  0x78, 0xF1, 0x7C, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63,
  0xC6, 0x2F, 0xFC, 0xC7, 0x8F, 0x19, 0xCC, 0x78, 0xF1, 0xE3, 0xC7, 0x8F,
  0x1E, 0x3C, 0x78, 0xF1, 0xBF, 0x07, 0x0D, 0xF0, 0xFE, 0x0C, 0x30, 0xC3,
  0x0C, 0x30, 0x7F, 0x29, 0x24, 0xA2, 0x49, 0x22, 0xFF, 0xF8, 0x89, 0x24,
  0x8A, 0x49, 0x28, 0x73, 0x38 };

const GFXglyph my_font_glyphs[] = {
  {     0,   1,   1,   5,    0,    0 },   // 0x20 ' '
  {     1,   2,  11,   6,    2,  -10 },   // 0x21 '!'
  {     4,   3,   4,   8,    2,  -10 },   // 0x22 '"'
  {     6,   9,  10,  12,    1,  -10 },   // 0x23 '#'
  {    18,   7,  13,   9,    1,  -11 },   // 0x24 '$'
  {    30,  11,  11,  13,    1,  -10 },   // 0x25 '%'
  {    46,   9,  11,  12,    1,  -10 },   // 0x26 '&'
  {    59,   1,   4,   4,    1,  -10 },   // 0x27 '''
  {    60,   3,  13,   6,    1,  -11 },   // 0x28 '('
  {    65,   3,  13,   6,    2,  -11 },   // 0x29 ')'
  {    70,   5,   7,   8,    1,   -9 },   // 0x2A '*'
  {    75,   5,   5,   8,    1,   -5 },   // 0x2B '+'
  {    79,   2,   4,   4,    1,   -1 },   // 0x2C ','
  {    80,   6,   1,   8,    1,   -4 },   // 0x2D '-'
  {    81,   2,   2,   4,    1,   -1 },   // 0x2E '.'
  {    82,   6,  12,   8,    1,  -11 },   // 0x2F '/'
  {    91,   7,  11,   9,    1,  -10 },   // 0x30 '0'
  {   101,   3,  11,   9,    3,  -10 },   // 0x31 '1'
  {   106,   7,  11,   9,    1,  -10 },   // 0x32 '2'
  {   116,   7,  11,   9,    1,  -10 },   // 0x33 '3'
  {   126,   8,  11,   9,    0,  -10 },   // 0x34 '4'
  {   137,   7,  11,   9,    1,  -10 },   // 0x35 '5'
  {   147,   7,  11,   9,    1,  -10 },   // 0x36 '6'
  {   157,   7,  11,   9,    1,  -10 },   // 0x37 '7'
  {   167,   7,  11,   9,    1,  -10 },   // 0x38 '8'
  {   177,   7,  11,   9,    1,  -10 },   // 0x39 '9'
  {   187,   2,   8,   4,    1,   -7 },   // 0x3A ':'
  {   189,   2,  10,   4,    1,   -7 },   // 0x3B ';'
  {   192,   6,   9,   7,    0,   -9 },   // 0x3C '<'
  {   199,   7,   3,   9,    1,   -4 },   // 0x3D '='
  {   202,   6,   9,   7,    1,   -9 },   // 0x3E '>'
  {   209,   7,  11,   9,    1,  -10 },   // 0x3F '?'
  {   219,  11,  11,  13,    1,  -10 },   // 0x40 '@'
  {   235,   7,  11,   9,    1,  -10 },   // 0x41 'A'
  {   245,   7,  11,   9,    1,  -10 },   // 0x42 'B'
  {   255,   7,  11,   9,    1,  -10 },   // 0x43 'C'
  {   265,   7,  11,   9,    1,  -10 },   // 0x44 'D'
  {   275,   6,  11,   8,    1,  -10 },   // 0x45 'E'
  {   284,   6,  11,   8,    1,  -10 },   // 0x46 'F'
  {   293,   7,  11,   9,    1,  -10 },   // 0x47 'G'
  {   303,   7,  11,   9,    1,  -10 },   // 0x48 'H'
  {   313,   2,  11,   6,    2,  -10 },   // 0x49 'I'
  {   316,   7,  11,   8,    0,  -10 },   // 0x4A 'J'
  {   326,   9,  11,  11,    1,  -10 },   // 0x4B 'K'
  {   339,   6,  11,   8,    1,  -10 },   // 0x4C 'L'
  {   348,  12,  11,  14,    1,  -10 },   // 0x4D 'M'
  {   365,   9,  11,  11,    1,  -10 },   // 0x4E 'N'
  {   378,   7,  11,   9,    1,  -10 },   // 0x4F 'O'
  {   388,   7,  11,   9,    1,  -10 },   // 0x50 'P'
  {   398,   7,  12,   9,    1,  -10 },   // 0x51 'Q'
  {   409,   7,  11,   9,    1,  -10 },   // 0x52 'R'
  {   419,   6,  11,   8,    1,  -10 },   // 0x53 'S'
  {   428,   6,  11,   6,    0,  -10 },   // 0x54 'T'
  {   437,   7,  11,   9,    1,  -10 },   // 0x55 'U'
  {   447,   7,  11,   9,    1,  -10 },   // 0x56 'V'
  {   457,  12,  11,  14,    1,  -10 },   // 0x57 'W'
  {   474,   7,  11,   9,    1,  -10 },   // 0x58 'X'
  {   484,   6,  11,   8,    1,  -10 },   // 0x59 'Y'
  {   493,   7,  11,   9,    1,  -10 },   // 0x5A 'Z'
  {   503,   3,  13,   5,    1,  -11 },   // 0x5B '['
  {   508,   6,  12,   8,    1,  -11 },   // 0x5C '\'
  {   517,   3,  13,   5,    1,  -11 },   // 0x5D ']'
  {   522,   7,   4,   9,    1,  -10 },   // 0x5E '^'
  {   526,   9,   1,   9,    0,    1 },   // 0x5F '_'
  {   528,   2,   2,   7,    2,  -11 },   // 0x60 '`'
  {   529,   7,   8,   9,    1,   -7 },   // 0x61 'a'
  {   536,   7,  11,   9,    1,  -10 },   // 0x62 'b'
  {   546,   6,   8,   8,    1,   -7 },   // 0x63 'c'
  {   552,   7,  11,   9,    1,  -10 },   // 0x64 'd'
  {   562,   7,   8,   9,    1,   -7 },   // 0x65 'e'
  {   569,   5,  11,   6,    1,  -10 },   // 0x66 'f'
  {   576,   7,  11,   9,    1,   -7 },   // 0x67 'g'
  {   586,   7,  11,   9,    1,  -10 },   // 0x68 'h'
  {   596,   2,  11,   4,    1,  -10 },   // 0x69 'i'
  {   599,   6,  13,   7,    0,  -10 },   // 0x6A 'j'
  {   609,   8,  11,   9,    1,  -10 },   // 0x6B 'k'
  {   620,   2,  11,   4,    1,  -10 },   // 0x6C 'l'
  {   623,  12,   8,  14,    1,   -7 },   // 0x6D 'm'
  {   635,   7,   8,   9,    1,   -7 },   // 0x6E 'n'
  {   642,   7,   8,   9,    1,   -7 },   // 0x6F 'o'
  {   649,   7,  10,   9,    1,   -7 },   // 0x70 'p'
  {   658,   7,  10,   9,    1,   -7 },   // 0x71 'q'
  {   667,   6,   8,   7,    1,   -7 },   // 0x72 'r'
  {   673,   6,   8,   8,    1,   -7 },   // 0x73 's'
  {   679,   4,  11,   6,    1,  -10 },   // 0x74 't'
  {   685,   7,   8,   9,    1,   -7 },   // 0x75 'u'
  {   692,   7,   8,   9,    1,   -7 },   // 0x76 'v'
  {   699,  12,   8,  14,    1,   -7 },   // 0x77 'w'
  {   711,   7,   8,   9,    1,   -7 },   // 0x78 'x'
  {   718,   7,  11,   9,    1,   -7 },   // 0x79 'y'
  {   728,   7,   8,   9,    1,   -7 },   // 0x7A 'z'
  {   735,   3,  13,   5,    1,  -11 },   // 0x7B '{'
  {   740,   1,  13,   6,    2,  -11 },   // 0x7C '|'
  {   742,   3,  13,   5,    1,  -11 },   // 0x7D '}'
  {   747,   7,   2,   9,    1,   -7 } }; // 0x7E '~'

#define char_rows  15
#define chars_base 11

// Approx. 1421 bytes

void my_txt(uint8_t x, uint8_t y, char *str)
{
  while (*str) {
    if (*str >= 0x20 && *str <= 0x7E)
    {
      GFXglyph glyph = my_font_glyphs[*str - 0x20];

      uint8_t last_col = glyph.width;
      if (glyph.xOffset > 0) last_col += glyph.xOffset;
      // How many columns the character has
      uint8_t cols = glyph.xAdvance > last_col ? glyph.xAdvance : last_col;
      uint8_t char_base = chars_base + glyph.yOffset;
      uint8_t last_row = char_base + glyph.height;
      uint16_t offset = glyph.bitmapOffset;

      int8_t byte_shifts = 7;

      // Module shows row per row, top part is LSB
      for (uint8_t row = 0; row < char_rows; row++)
      {
        for (uint8_t col = 0; col < cols; col++)
        {
          // Check if current pixel is between offset and last col
          if (row >= char_base && row < last_row && col >= glyph.xOffset && col < last_col)
          {
            if ((my_font_bitmaps[offset] >> byte_shifts) & 1) sh1106_set_pixel(col + x, row + y);
            byte_shifts--;
            if (byte_shifts < 0)
            {
              byte_shifts = 7;
              offset++;
            }
          }
        }
      }
      x += cols;
    }
    str++;
  }
}

#endif
