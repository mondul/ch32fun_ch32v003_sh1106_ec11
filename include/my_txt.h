#ifndef _MY_TXT_H
#define _MY_TXT_H

#include <sh1106.h>

// Here to avoid including the whole Adafruit GFX library
typedef struct _GFXglyph {
  uint16_t bitmapOffset; // Pointer into GFXfont->bitmap
  uint8_t  width;        // Bitmap dimensions in pixels
  uint8_t  height;       // Bitmap dimensions in pixels
  uint8_t  xAdvance;     // Distance to advance cursor (x axis)
  int8_t   xOffset;      // X dist from cursor pos to UL corner
  int8_t   yOffset;      // Y dist from cursor pos to UL corner
} GFXglyph;

// Generated by fontconvert for the Adafruit GFX library
// Online version: https://fontconvert.huyzona.com

const uint8_t my_font_bitmaps[] = {
  0x00, 0xFF, 0xF3, 0xC0, 0xDE, 0xF6, 0x0A, 0x05, 0x1F, 0xEF, 0xF1, 0x47,
  0xFB, 0xFC, 0x50, 0x28, 0x00, 0x11, 0xFD, 0x34, 0xF1, 0xE3, 0xCB, 0x2F,
  0xE2, 0x00, 0x70, 0x1B, 0x23, 0x68, 0x3A, 0x00, 0x40, 0x13, 0x82, 0xD8,
  0x9B, 0x11, 0xC0, 0x38, 0x6C, 0x6C, 0x38, 0x73, 0xDB, 0xCE, 0xCE, 0x7B,
  0xFC, 0x36, 0x6C, 0xCC, 0xCC, 0x66, 0x30, 0xC6, 0x63, 0x33, 0x33, 0x66,
  0xC0, 0x48, 0xCF, 0xCC, 0x48, 0x30, 0xCF, 0xFF, 0x30, 0xC0, 0xF6, 0xFF,
  0xC0, 0xF0, 0x08, 0xC4, 0x62, 0x31, 0x18, 0x80, 0x7B, 0x3C, 0xF3, 0xCF,
  0x3C, 0xF3, 0x78, 0x7D, 0xB6, 0xDB, 0x60, 0x7B, 0x30, 0xC3, 0x18, 0xC6,
  0x30, 0xFC, 0x7B, 0x30, 0xC3, 0x38, 0x30, 0xF3, 0x78, 0x04, 0x18, 0x71,
  0x64, 0xDF, 0xC3, 0x06, 0x0C, 0xFF, 0x0C, 0x3E, 0x0C, 0x30, 0xF3, 0x78,
  0x39, 0x8C, 0x3E, 0xCF, 0x3C, 0xF3, 0x78, 0xFC, 0x31, 0x84, 0x30, 0xC6,
  0x18, 0x60, 0x7B, 0x3C, 0xF3, 0x7B, 0x3C, 0xF3, 0x78, 0x7B, 0x3C, 0xF3,
  0xCD, 0xF0, 0xC6, 0x70, 0xF0, 0x3C, 0xF0, 0x3D, 0x80, 0x36, 0xCC, 0x63,
  0xFF, 0xC1, 0xFF, 0x80, 0xC6, 0x33, 0x6C, 0xF0, 0xC6, 0x66, 0x30, 0x0C,
  0x60, 0x1E, 0x18, 0x64, 0x0A, 0x69, 0xB6, 0x6D, 0x9B, 0x66, 0x6E, 0x40,
  0x18, 0x01, 0xE0, 0x18, 0x18, 0x3C, 0x3C, 0x26, 0x66, 0x7E, 0xC3, 0xC3,
  0xF9, 0x9B, 0x37, 0xCC, 0xD8, 0xF1, 0xE6, 0xF8, 0x3D, 0x9C, 0x30, 0xC3,
  0x0C, 0x18, 0x3C, 0xF9, 0x9B, 0x1E, 0x3C, 0x78, 0xF1, 0xE6, 0xF8, 0xFF,
  0x0C, 0x30, 0xFB, 0x0C, 0x30, 0xFC, 0xFE, 0x31, 0x8F, 0x63, 0x18, 0xC0,
  0x3C, 0xCB, 0x06, 0x0C, 0xF8, 0xF1, 0xB3, 0x3C, 0xC7, 0x8F, 0x1E, 0x3F,
  0xF8, 0xF1, 0xE3, 0xC6, 0xFF, 0xFF, 0xC0, 0x33, 0x33, 0x33, 0x33, 0xE0,
  0xC6, 0xCC, 0xD8, 0xF0, 0xF0, 0xF8, 0xDC, 0xCE, 0xC6, 0xC6, 0x31, 0x8C,
  0x63, 0x18, 0xF8, 0xC0, 0xF0, 0x3E, 0x1F, 0x87, 0xB2, 0xEC, 0xB9, 0xCE,
  0x73, 0x88, 0xC0, 0x83, 0x87, 0x8F, 0x9B, 0xB3, 0xE3, 0xC3, 0x82, 0x38,
  0xDB, 0x1E, 0x3C, 0x78, 0xF1, 0xB6, 0x38, 0xFB, 0x3C, 0xF3, 0xFB, 0x0C,
  0x30, 0xC0, 0x38, 0xDB, 0x1E, 0x3C, 0x78, 0xF1, 0xB7, 0x3C, 0x30, 0x30,
  0xFB, 0x3C, 0xF3, 0xFB, 0x7C, 0xF3, 0xCC, 0x7E, 0x31, 0xC7, 0x1C, 0x63,
  0xF0, 0xFC, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x87, 0x0E, 0x1C,
  0x38, 0x70, 0xB2, 0x38, 0xC3, 0xC2, 0x66, 0x66, 0x64, 0x3C, 0x3C, 0x18,
  0x18, 0xC6, 0x3C, 0x62, 0xC6, 0x26, 0xF6, 0x6B, 0x47, 0xBC, 0x31, 0x83,
  0x18, 0x31, 0x80, 0xE3, 0x66, 0x34, 0x38, 0x18, 0x3C, 0x2C, 0x66, 0xC7,
  0xE3, 0x62, 0x66, 0x34, 0x3C, 0x18, 0x18, 0x18, 0x18, 0xFC, 0x31, 0x86,
  0x31, 0x86, 0x30, 0xFC, 0xFB, 0x6D, 0xB6, 0xDB, 0x80, 0x40, 0xC0, 0x81,
  0x81, 0x03, 0x02, 0x06, 0x04, 0xED, 0xB6, 0xDB, 0x6F, 0x80, 0x31, 0xE7,
  0xB3, 0xCC, 0xF8, 0xCC, 0x78, 0x37, 0xF3, 0xCF, 0x76, 0xC0, 0xC3, 0x0D,
  0xBB, 0xCF, 0x3C, 0xF3, 0xF8, 0x7E, 0x71, 0x8C, 0x61, 0xE0, 0x0C, 0x37,
  0xF3, 0xCF, 0x3C, 0xF3, 0x74, 0x7B, 0x3C, 0xFF, 0xC3, 0x07, 0xC0, 0x3B,
  0x3C, 0xC6, 0x31, 0x8C, 0x60, 0x77, 0x3C, 0xF3, 0xCF, 0x76, 0xC3, 0x78,
  0xC3, 0x0D, 0xBB, 0xCF, 0x3C, 0xF3, 0xCC, 0xCF, 0xFF, 0xC0, 0x30, 0x33,
  0x33, 0x33, 0x33, 0xE0, 0xC3, 0x0C, 0xF6, 0xF3, 0x8F, 0x36, 0xCC, 0xFF,
  0xFF, 0xC0, 0xD9, 0xBB, 0xBC, 0xCF, 0x33, 0xCC, 0xF3, 0x3C, 0xCC, 0xDB,
  0xBC, 0xF3, 0xCF, 0x3C, 0xC0, 0x7B, 0x3C, 0xF3, 0xCF, 0x37, 0x80, 0xDB,
  0xBC, 0xF3, 0xCF, 0x3F, 0xB0, 0xC0, 0x77, 0x3C, 0xF3, 0xCF, 0x37, 0xC3,
  0x0C, 0xDF, 0xF1, 0x8C, 0x63, 0x00, 0x7E, 0x38, 0xE3, 0x8F, 0xC0, 0x23,
  0x3E, 0xC6, 0x31, 0x8C, 0x38, 0xCF, 0x3C, 0xF3, 0xCF, 0x76, 0xC0, 0xC7,
  0x8D, 0x93, 0x63, 0x87, 0x04, 0x00, 0xC4, 0x79, 0x8D, 0xB9, 0x37, 0x63,
  0xB8, 0x77, 0x04, 0x40, 0xE6, 0xD8, 0xE1, 0xC3, 0x8D, 0xB3, 0x80, 0xC6,
  0xC6, 0x64, 0x6C, 0x38, 0x38, 0x10, 0x30, 0x60, 0xF8, 0xCC, 0xE6, 0x63,
  0xE0, 0x36, 0x66, 0xC6, 0x66, 0x66, 0x30, 0xFF, 0xFF, 0xFC, 0xC6, 0x66,
  0x36, 0x66, 0x66, 0xC0, 0x63, 0xFE, 0x30 };

const GFXglyph my_font_glyphs[] = {
  {     0,   1,   1,   3,    0,    0 },   // 0x20 ' '
  {     1,   2,   9,   5,    2,   -8 },   // 0x21 '!'
  {     4,   5,   3,   6,    1,   -8 },   // 0x22 '"'
  {     6,   9,   9,   9,    0,   -8 },   // 0x23 '#'
  {    17,   6,  11,   7,    1,   -9 },   // 0x24 '$'
  {    26,  11,   9,  11,    0,   -8 },   // 0x25 '%'
  {    39,   8,   9,   9,    1,   -8 },   // 0x26 '&'
  {    48,   2,   3,   3,    1,   -8 },   // 0x27 '''
  {    49,   4,  11,   5,    1,   -8 },   // 0x28 '('
  {    55,   4,  11,   5,    1,   -8 },   // 0x29 ')'
  {    61,   6,   5,   7,    1,   -7 },   // 0x2A '*'
  {    65,   6,   6,   7,    1,   -6 },   // 0x2B '+'
  {    70,   2,   4,   3,    1,   -1 },   // 0x2C ','
  {    71,   5,   2,   7,    1,   -4 },   // 0x2D '-'
  {    73,   2,   2,   3,    1,   -1 },   // 0x2E '.'
  {    74,   5,   9,   6,    1,   -8 },   // 0x2F '/'
  {    80,   6,   9,   7,    1,   -8 },   // 0x30 '0'
  {    87,   3,   9,   7,    2,   -8 },   // 0x31 '1'
  {    91,   6,   9,   7,    1,   -8 },   // 0x32 '2'
  {    98,   6,   9,   7,    1,   -8 },   // 0x33 '3'
  {   105,   7,   9,   7,    0,   -8 },   // 0x34 '4'
  {   113,   6,   9,   7,    1,   -8 },   // 0x35 '5'
  {   120,   6,   9,   7,    1,   -8 },   // 0x36 '6'
  {   127,   6,   9,   7,    1,   -8 },   // 0x37 '7'
  {   134,   6,   9,   7,    1,   -8 },   // 0x38 '8'
  {   141,   6,   9,   7,    1,   -8 },   // 0x39 '9'
  {   148,   2,   7,   3,    1,   -6 },   // 0x3A ':'
  {   150,   2,   9,   3,    1,   -6 },   // 0x3B ';'
  {   153,   4,   6,   6,    1,   -5 },   // 0x3C '<'
  {   156,   5,   5,   7,    1,   -5 },   // 0x3D '='
  {   160,   4,   6,   6,    1,   -5 },   // 0x3E '>'
  {   163,   5,   9,   6,    1,   -8 },   // 0x3F '?'
  {   169,  10,  11,  11,    1,   -8 },   // 0x40 '@'
  {   183,   8,   9,   8,    0,   -8 },   // 0x41 'A'
  {   192,   7,   9,   8,    1,   -8 },   // 0x42 'B'
  {   200,   6,   9,   7,    1,   -8 },   // 0x43 'C'
  {   207,   7,   9,   8,    1,   -8 },   // 0x44 'D'
  {   215,   6,   9,   7,    1,   -8 },   // 0x45 'E'
  {   222,   5,   9,   6,    1,   -8 },   // 0x46 'F'
  {   228,   7,   9,   8,    1,   -8 },   // 0x47 'G'
  {   236,   7,   9,   8,    1,   -8 },   // 0x48 'H'
  {   244,   2,   9,   5,    2,   -8 },   // 0x49 'I'
  {   247,   4,   9,   6,    1,   -8 },   // 0x4A 'J'
  {   252,   8,   9,   8,    1,   -8 },   // 0x4B 'K'
  {   261,   5,   9,   6,    1,   -8 },   // 0x4C 'L'
  {   267,  10,   9,  11,    1,   -8 },   // 0x4D 'M'
  {   279,   7,   9,   8,    1,   -8 },   // 0x4E 'N'
  {   287,   7,   9,   8,    1,   -8 },   // 0x4F 'O'
  {   295,   6,   9,   7,    1,   -8 },   // 0x50 'P'
  {   302,   7,  11,   8,    1,   -8 },   // 0x51 'Q'
  {   312,   6,   9,   7,    1,   -8 },   // 0x52 'R'
  {   319,   5,   9,   7,    1,   -8 },   // 0x53 'S'
  {   325,   6,   9,   6,    0,   -8 },   // 0x54 'T'
  {   332,   7,   9,   8,    1,   -8 },   // 0x55 'U'
  {   340,   8,   9,   8,    0,   -8 },   // 0x56 'V'
  {   349,  12,   9,  12,    0,   -8 },   // 0x57 'W'
  {   363,   8,   9,   8,    0,   -8 },   // 0x58 'X'
  {   372,   8,   9,   8,    0,   -8 },   // 0x59 'Y'
  {   381,   6,   9,   7,    1,   -8 },   // 0x5A 'Z'
  {   388,   3,  11,   5,    1,   -8 },   // 0x5B '['
  {   393,   7,   9,   6,   -1,   -8 },   // 0x5C '\'
  {   401,   3,  11,   5,    1,   -8 },   // 0x5D ']'
  {   406,   6,   5,   7,    1,   -8 },   // 0x5E '^'
  {   410,   5,   1,   6,    1,    2 },   // 0x5F '_'
  {   411,   3,   2,   6,    2,   -9 },   // 0x60 '`'
  {   412,   6,   7,   8,    1,   -6 },   // 0x61 'a'
  {   418,   6,   9,   8,    1,   -8 },   // 0x62 'b'
  {   425,   5,   7,   7,    1,   -6 },   // 0x63 'c'
  {   430,   6,   9,   8,    1,   -8 },   // 0x64 'd'
  {   437,   6,   7,   8,    1,   -6 },   // 0x65 'e'
  {   443,   5,   9,   4,    0,   -8 },   // 0x66 'f'
  {   449,   6,   9,   8,    1,   -6 },   // 0x67 'g'
  {   456,   6,   9,   8,    1,   -8 },   // 0x68 'h'
  {   463,   2,   9,   4,    1,   -8 },   // 0x69 'i'
  {   466,   4,  11,   4,   -1,   -8 },   // 0x6A 'j'
  {   472,   6,   9,   7,    1,   -8 },   // 0x6B 'k'
  {   479,   2,   9,   4,    1,   -8 },   // 0x6C 'l'
  {   482,  10,   7,  12,    1,   -6 },   // 0x6D 'm'
  {   491,   6,   7,   8,    1,   -6 },   // 0x6E 'n'
  {   497,   6,   7,   8,    1,   -6 },   // 0x6F 'o'
  {   503,   6,   9,   8,    1,   -6 },   // 0x70 'p'
  {   510,   6,   9,   8,    1,   -6 },   // 0x71 'q'
  {   517,   5,   7,   6,    1,   -6 },   // 0x72 'r'
  {   522,   5,   7,   7,    1,   -6 },   // 0x73 's'
  {   527,   5,   9,   5,    0,   -8 },   // 0x74 't'
  {   533,   6,   7,   8,    1,   -6 },   // 0x75 'u'
  {   539,   7,   7,   7,    0,   -6 },   // 0x76 'v'
  {   546,  11,   7,  11,    0,   -6 },   // 0x77 'w'
  {   556,   7,   7,   7,    0,   -6 },   // 0x78 'x'
  {   563,   8,   9,   7,    0,   -6 },   // 0x79 'y'
  {   572,   5,   7,   7,    1,   -6 },   // 0x7A 'z'
  {   577,   4,  11,   5,    1,   -8 },   // 0x7B '{'
  {   583,   2,  11,   5,    2,   -8 },   // 0x7C '|'
  {   586,   4,  11,   5,    0,   -8 },   // 0x7D '}'
  {   592,   7,   3,   8,    1,   -5 } }; // 0x7E '~'

#define char_rows  12
#define chars_base 9

// Approx. 1267 bytes

void my_txt(uint8_t x, uint8_t y, char *str)
{
  while (*str) {
    if (*str >= 0x20 && *str <= 0x7E)
    {
      GFXglyph glyph = my_font_glyphs[*str - 0x20];

      uint8_t last_col = glyph.width;
      if (glyph.xOffset > 0) last_col += glyph.xOffset;
      // How many columns the character has
      uint8_t cols = glyph.xAdvance > last_col ? glyph.xAdvance : last_col;
      uint8_t char_base = chars_base + glyph.yOffset;
      uint8_t last_row = char_base + glyph.height;
      uint16_t offset = glyph.bitmapOffset;

      int8_t byte_shifts = 7;

      // Module shows row per row, top part is LSB
      for (uint8_t row = 0; row < char_rows; row++)
      {
        for (uint8_t col = 0; col < cols; col++)
        {
          // Check if current pixel is between offset and last col
          if (row >= char_base && row < last_row && col >= glyph.xOffset && col < last_col)
          {
            if ((my_font_bitmaps[offset] >> byte_shifts) & 1) sh1106_set_pixel(col + x, row + y);
            byte_shifts--;
            if (byte_shifts < 0)
            {
              byte_shifts = 7;
              offset++;
            }
          }
        }
      }
      x += cols;
    }
    str++;
  }
}

#endif
