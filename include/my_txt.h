#ifndef _MY_TXT_H
#define _MY_TXT_H

#include <stdint.h>
#include <sh1106.h>

// Here to avoid including the whole Adafruit GFX library
typedef struct _GFXglyph {
  uint16_t bitmapOffset; // Pointer into GFXfont->bitmap
  uint8_t  width;        // Bitmap dimensions in pixels
  uint8_t  height;       // Bitmap dimensions in pixels
  uint8_t  xAdvance;     // Distance to advance cursor (x axis)
  int8_t   xOffset;      // X dist from cursor pos to UL corner
  int8_t   yOffset;      // Y dist from cursor pos to UL corner
} GFXglyph;

// Based off GFXfont
typedef struct _MyFont {
  uint8_t  *bitmap;
  GFXglyph *glyphs;
  uint8_t  char_rows;
  uint8_t  chars_base;
} MyFont;

// Generated by fontconvert for the Adafruit GFX library
// Online version: https://fontconvert.huyzona.com

/**
 * Ithaca Medium, 8pt font for the Arduino GFX library
 */

const uint8_t Ithaca8pt7bBitmaps[] = {
  0x00, 0xFF, 0xF3, 0xC0, 0xB6, 0xD0, 0x6C, 0xDB, 0xFB, 0x66, 0xCD, 0xBF,
  0xB6, 0x6C, 0x23, 0xB7, 0x8C, 0x38, 0x63, 0xDB, 0x88, 0xDE, 0xC6, 0x67,
  0x33, 0x1B, 0xD8, 0x73, 0x6D, 0x9C, 0xDB, 0x66, 0xC0, 0xFE, 0x2F, 0x6D,
  0xB6, 0xCC, 0x80, 0x99, 0xB6, 0xDB, 0x7A, 0x00, 0x5D, 0x50, 0x21, 0x3E,
  0x42, 0x00, 0xF6, 0xF0, 0xF0, 0x18, 0xC6, 0x67, 0x33, 0x18, 0xC0, 0x76,
  0xF7, 0xBD, 0xEF, 0x7B, 0x70, 0x6E, 0x66, 0x66, 0x66, 0xF0, 0x76, 0xC6,
  0x33, 0xBB, 0x98, 0xF8, 0x74, 0xC6, 0x37, 0x0C, 0x73, 0x70, 0x18, 0xE3,
  0x96, 0xDB, 0x6F, 0xC6, 0x18, 0xFE, 0x31, 0xED, 0x8C, 0x7B, 0x70, 0x19,
  0x99, 0xED, 0xEF, 0x7B, 0x70, 0xF8, 0xC6, 0x63, 0x19, 0x8C, 0x60, 0x76,
  0xF7, 0xB7, 0x6F, 0x7B, 0x70, 0x76, 0xF7, 0xBD, 0xBC, 0xCC, 0xC0, 0xF0,
  0x3C, 0xF0, 0x3D, 0x80, 0x36, 0xC6, 0x30, 0xF0, 0xF0, 0xC6, 0x36, 0xC0,
  0x76, 0xF6, 0x37, 0x30, 0x0C, 0x60, 0x7B, 0x3C, 0xF7, 0xDF, 0x7D, 0xB0,
  0xC5, 0xE0, 0x76, 0xF7, 0xBD, 0xFF, 0x7B, 0xD8, 0xF6, 0xF7, 0xBF, 0x6F,
  0x7B, 0xF0, 0x76, 0xF1, 0x8C, 0x63, 0x1B, 0x70, 0xF6, 0xF7, 0xBD, 0xEF,
  0x7B, 0xF0, 0xFE, 0x31, 0x8F, 0xE3, 0x18, 0xF8, 0xFE, 0x31, 0x8F, 0xE3,
  0x18, 0xC0, 0x76, 0xF1, 0x8F, 0xEF, 0x7B, 0x78, 0xDE, 0xF7, 0xBF, 0xEF,
  0x7B, 0xD8, 0xF6, 0x66, 0x66, 0x66, 0xF0, 0x78, 0xC6, 0x31, 0x8C, 0x7B,
  0x70, 0xDE, 0xF7, 0xBF, 0x6F, 0x7B, 0xD8, 0xC6, 0x31, 0x8C, 0x63, 0x18,
  0xF8, 0xE7, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xCF, 0x3E,
  0xFB, 0xDF, 0x7C, 0xF3, 0xCC, 0x76, 0xF7, 0xBD, 0xEF, 0x7B, 0x70, 0xF6,
  0xF7, 0xBF, 0x63, 0x18, 0xC0, 0x76, 0xF7, 0xBD, 0xEF, 0x7B, 0x71, 0x86,
  0xF6, 0xF7, 0xBF, 0x6F, 0x7B, 0xD8, 0x76, 0xF1, 0x87, 0x0C, 0x7B, 0x70,
  0xFC, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xDE, 0xF7, 0xBD, 0xEF, 0x7B,
  0x70, 0xDE, 0xF7, 0xBD, 0xED, 0xCE, 0x20, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
  0xDB, 0x7E, 0x7E, 0x24, 0xDE, 0xF7, 0xB7, 0x6F, 0x7B, 0xD8, 0xCF, 0x3C,
  0xF3, 0x78, 0xC3, 0x0C, 0x30, 0xF8, 0xC6, 0x77, 0x73, 0x18, 0xF8, 0xFB,
  0x6D, 0xB6, 0xDB, 0x80, 0xC6, 0x30, 0xC7, 0x18, 0x63, 0x18, 0xED, 0xB6,
  0xDB, 0x6F, 0x80, 0x31, 0xEC, 0xF3, 0xF0, 0x90, 0x76, 0xC6, 0xFD, 0xED,
  0xE0, 0xC6, 0x3D, 0xBD, 0xEF, 0x7B, 0xF0, 0x76, 0xF1, 0x8C, 0x6D, 0xC0,
  0x18, 0xDF, 0xBD, 0xEF, 0x7B, 0x78, 0x76, 0xF7, 0xFC, 0x6D, 0xC0, 0x36,
  0xF6, 0x66, 0x66, 0x60, 0x7E, 0xF7, 0xBD, 0xED, 0xE3, 0xF0, 0xC6, 0x3D,
  0xBD, 0xEF, 0x7B, 0xD8, 0x60, 0xE6, 0x66, 0x66, 0xF0, 0x63, 0xB6, 0xDB,
  0x6F, 0x00, 0xC6, 0x37, 0xBD, 0xFB, 0x7B, 0xD8, 0xFF, 0xFF, 0xC0, 0xFE,
  0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xF6, 0xF7, 0xBD, 0xEF, 0x60, 0x76,
  0xF7, 0xBD, 0xED, 0xC0, 0xF6, 0xF7, 0xBD, 0xEF, 0xD8, 0xC0, 0x7E, 0xF7,
  0xBD, 0xED, 0xE3, 0x18, 0xF6, 0xF1, 0x8C, 0x63, 0x00, 0x76, 0xF0, 0xE1,
  0xED, 0xC0, 0x66, 0xF6, 0x66, 0x66, 0x30, 0xDE, 0xF7, 0xBD, 0xED, 0xE0,
  0xDE, 0xF7, 0xBD, 0xB8, 0x80, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x7E, 0x24,
  0xDE, 0xF6, 0xED, 0xEF, 0x60, 0xDE, 0xF7, 0xBD, 0xED, 0xE3, 0xF0, 0xF8,
  0xCE, 0xEE, 0x63, 0xE0, 0x36, 0x66, 0x6C, 0x66, 0x66, 0x30, 0xFF, 0xFF,
  0xFC, 0xC6, 0x66, 0x63, 0x66, 0x66, 0xC0, 0x3F, 0xC0 };

const GFXglyph Ithaca8pt7bGlyphs[] = {
  {     0,   1,   1,   3,    0,    0 },   // 0x20 ' '
  {     1,   2,   9,   3,    0,   -8 },   // 0x21 '!'
  {     4,   3,   4,   4,    0,   -8 },   // 0x22 '"'
  {     6,   7,   9,   8,    0,   -8 },   // 0x23 '#'
  {    14,   5,  11,   6,    0,   -9 },   // 0x24 '$'
  {    21,   5,   9,   6,    0,   -8 },   // 0x25 '%'
  {    27,   6,   7,   7,    0,   -6 },   // 0x26 '&'
  {    33,   2,   4,   3,    0,   -8 },   // 0x27 '''
  {    34,   3,  11,   4,    0,   -9 },   // 0x28 '('
  {    39,   3,  11,   4,    0,   -9 },   // 0x29 ')'
  {    44,   3,   4,   4,    0,   -8 },   // 0x2A '*'
  {    46,   5,   5,   6,    0,   -6 },   // 0x2B '+'
  {    50,   2,   4,   3,    0,   -1 },   // 0x2C ','
  {    51,   4,   1,   5,    0,   -4 },   // 0x2D '-'
  {    52,   2,   2,   3,    0,   -1 },   // 0x2E '.'
  {    53,   5,   9,   6,    0,   -8 },   // 0x2F '/'
  {    59,   5,   9,   6,    0,   -8 },   // 0x30 '0'
  {    65,   4,   9,   5,    0,   -8 },   // 0x31 '1'
  {    70,   5,   9,   6,    0,   -8 },   // 0x32 '2'
  {    76,   5,   9,   6,    0,   -8 },   // 0x33 '3'
  {    82,   6,   9,   7,    0,   -8 },   // 0x34 '4'
  {    89,   5,   9,   6,    0,   -8 },   // 0x35 '5'
  {    95,   5,   9,   6,    0,   -8 },   // 0x36 '6'
  {   101,   5,   9,   6,    0,   -8 },   // 0x37 '7'
  {   107,   5,   9,   6,    0,   -8 },   // 0x38 '8'
  {   113,   5,   9,   6,    0,   -8 },   // 0x39 '9'
  {   119,   2,   7,   3,    0,   -6 },   // 0x3A ':'
  {   121,   2,   9,   3,    0,   -6 },   // 0x3B ';'
  {   124,   4,   5,   5,    0,   -6 },   // 0x3C '<'
  {   127,   4,   3,   5,    0,   -5 },   // 0x3D '='
  {   129,   4,   5,   5,    0,   -6 },   // 0x3E '>'
  {   132,   5,   9,   6,    0,   -8 },   // 0x3F '?'
  {   138,   6,  10,   7,    0,   -8 },   // 0x40 '@'
  {   146,   5,   9,   6,    0,   -8 },   // 0x41 'A'
  {   152,   5,   9,   6,    0,   -8 },   // 0x42 'B'
  {   158,   5,   9,   6,    0,   -8 },   // 0x43 'C'
  {   164,   5,   9,   6,    0,   -8 },   // 0x44 'D'
  {   170,   5,   9,   6,    0,   -8 },   // 0x45 'E'
  {   176,   5,   9,   6,    0,   -8 },   // 0x46 'F'
  {   182,   5,   9,   6,    0,   -8 },   // 0x47 'G'
  {   188,   5,   9,   6,    0,   -8 },   // 0x48 'H'
  {   194,   4,   9,   5,    0,   -8 },   // 0x49 'I'
  {   199,   5,   9,   6,    0,   -8 },   // 0x4A 'J'
  {   205,   5,   9,   6,    0,   -8 },   // 0x4B 'K'
  {   211,   5,   9,   6,    0,   -8 },   // 0x4C 'L'
  {   217,   8,   9,   9,    0,   -8 },   // 0x4D 'M'
  {   226,   6,   9,   7,    0,   -8 },   // 0x4E 'N'
  {   233,   5,   9,   6,    0,   -8 },   // 0x4F 'O'
  {   239,   5,   9,   6,    0,   -8 },   // 0x50 'P'
  {   245,   5,  11,   6,    0,   -8 },   // 0x51 'Q'
  {   252,   5,   9,   6,    0,   -8 },   // 0x52 'R'
  {   258,   5,   9,   6,    0,   -8 },   // 0x53 'S'
  {   264,   6,   9,   7,    0,   -8 },   // 0x54 'T'
  {   271,   5,   9,   6,    0,   -8 },   // 0x55 'U'
  {   277,   5,   9,   6,    0,   -8 },   // 0x56 'V'
  {   283,   8,   9,   9,    0,   -8 },   // 0x57 'W'
  {   292,   5,   9,   6,    0,   -8 },   // 0x58 'X'
  {   298,   6,   9,   7,    0,   -8 },   // 0x59 'Y'
  {   305,   5,   9,   6,    0,   -8 },   // 0x5A 'Z'
  {   311,   3,  11,   4,    0,   -9 },   // 0x5B '['
  {   316,   5,   9,   6,    0,   -8 },   // 0x5C '\'
  {   322,   3,  11,   4,    0,   -9 },   // 0x5D ']'
  {   327,   6,   4,   7,    0,   -8 },   // 0x5E '^'
  {   330,   4,   1,   5,    0,    1 },   // 0x5F '_'
  {   331,   2,   2,   3,    0,   -9 },   // 0x60 '`'
  {   332,   5,   7,   6,    0,   -6 },   // 0x61 'a'
  {   337,   5,   9,   6,    0,   -8 },   // 0x62 'b'
  {   343,   5,   7,   6,    0,   -6 },   // 0x63 'c'
  {   348,   5,   9,   6,    0,   -8 },   // 0x64 'd'
  {   354,   5,   7,   6,    0,   -6 },   // 0x65 'e'
  {   359,   4,   9,   5,    0,   -8 },   // 0x66 'f'
  {   364,   5,   9,   6,    0,   -6 },   // 0x67 'g'
  {   370,   5,   9,   6,    0,   -8 },   // 0x68 'h'
  {   376,   4,   9,   5,    0,   -8 },   // 0x69 'i'
  {   381,   3,  11,   4,    0,   -8 },   // 0x6A 'j'
  {   386,   5,   9,   6,    0,   -8 },   // 0x6B 'k'
  {   392,   2,   9,   3,    0,   -8 },   // 0x6C 'l'
  {   395,   8,   7,   9,    0,   -6 },   // 0x6D 'm'
  {   402,   5,   7,   6,    0,   -6 },   // 0x6E 'n'
  {   407,   5,   7,   6,    0,   -6 },   // 0x6F 'o'
  {   412,   5,   9,   6,    0,   -6 },   // 0x70 'p'
  {   418,   5,   9,   6,    0,   -6 },   // 0x71 'q'
  {   424,   5,   7,   6,    0,   -6 },   // 0x72 'r'
  {   429,   5,   7,   6,    0,   -6 },   // 0x73 's'
  {   434,   4,   9,   5,    0,   -8 },   // 0x74 't'
  {   439,   5,   7,   6,    0,   -6 },   // 0x75 'u'
  {   444,   5,   7,   6,    0,   -6 },   // 0x76 'v'
  {   449,   8,   7,   9,    0,   -6 },   // 0x77 'w'
  {   456,   5,   7,   6,    0,   -6 },   // 0x78 'x'
  {   461,   5,   9,   6,    0,   -6 },   // 0x79 'y'
  {   467,   5,   7,   6,    0,   -6 },   // 0x7A 'z'
  {   472,   4,  11,   5,    0,   -9 },   // 0x7B '{'
  {   478,   2,  11,   3,    0,   -9 },   // 0x7C '|'
  {   481,   4,  11,   5,    0,   -9 },   // 0x7D '}'
  {   487,   4,   3,   5,    0,   -5 } }; // 0x7E '~'

// For JS: char_rows=12 chars_base=9

const MyFont my_default_font = {
  (uint8_t  *)Ithaca8pt7bBitmaps,
  (GFXglyph *)Ithaca8pt7bGlyphs,
  12, // char_rows
  9   // chars_base
};

// Approx. 1161 bytes

// Font can be changed outside by reasigning this variable
const MyFont *my_font = &my_default_font;

// Set current font
void my_set_font(const MyFont *font)
{
  if (font == NULL) my_font = &my_default_font;
  else my_font = font;
}

// Write text in (x, y) coordinates
void my_txt(uint8_t x, uint8_t y, char *str)
{
  while (*str) {
    if (*str >= 0x20 && *str <= 0x7E)
    {
      GFXglyph glyph = my_font->glyphs[*str - 0x20];

      uint8_t last_col = glyph.width;
      if (glyph.xOffset > 0) last_col += glyph.xOffset;
      // How many columns the character has
      uint8_t cols = glyph.xAdvance > last_col ? glyph.xAdvance : last_col;
      uint8_t char_base = my_font->chars_base + glyph.yOffset;
      uint8_t last_row = char_base + glyph.height;
      uint16_t offset = glyph.bitmapOffset;

      int8_t byte_shifts = 7;

      // Module shows row per row, top part is LSB
      for (uint8_t row = 0; row < my_font->char_rows; row++)
      {
        for (uint8_t col = 0; col < cols; col++)
        {
          // Check if current pixel is between offset and last col
          if (row >= char_base && row < last_row && col >= glyph.xOffset && col < last_col)
          {
            if ((my_font->bitmap[offset] >> byte_shifts) & 1) sh1106_set_pixel(col + x, row + y);
            byte_shifts--;
            if (byte_shifts < 0)
            {
              byte_shifts = 7;
              offset++;
            }
          }
        }
      }
      x += cols;
    }
    str++;
  }
}

#endif
